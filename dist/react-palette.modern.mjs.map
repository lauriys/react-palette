{"version":3,"file":"react-palette.modern.mjs","sources":["../src/getPalette.ts","../src/usePalette.tsx","../src/Palette.tsx"],"sourcesContent":["import Vibrant from \"node-vibrant\";\r\nimport camelCase from \"lodash.camelcase\";\r\nimport invoke from 'lodash.invoke';\r\n\r\nexport type PaletteColors = {\r\n  vibrant?: string;\r\n  muted?: string;\r\n  darkVibrant?: string;\r\n  darkMuted?: string;\r\n  lightVibrant?: string;\r\n  lightMuted?: string;\r\n  [name: string]: string | undefined;\r\n};\r\n\r\nexport async function getPalette(src: string) {\r\n  const palette = await Vibrant.from(src).getPalette();\r\n  const setPaletteColor = (acc, paletteName) => ({\r\n    ...acc,\r\n    [camelCase(paletteName)]: invoke(palette, [paletteName, 'getHex'])\r\n  });\r\n\r\n  return Object.keys(palette).reduce<PaletteColors>(setPaletteColor, {});\r\n}\r\n","import React from \"react\";\r\nimport { getPalette, PaletteColors } from \"./getPalette\";\r\n\r\nexport type PaletteState = {\r\n  loading: boolean;\r\n  error?: Error;\r\n  data: PaletteColors;\r\n};\r\n\r\nconst initialState: PaletteState = {\r\n  loading: true,\r\n  data: {},\r\n  error: undefined,\r\n};\r\n\r\nfunction reducer(state: PaletteState, action): PaletteState {\r\n  switch (action.type) {\r\n    case \"getPalette\":\r\n      return initialState;\r\n    case \"resolvePalette\":\r\n      return { ...state, data: action.payload, loading: false };\r\n    case \"rejectPalette\":\r\n      return { ...state, error: action.payload, loading: false };\r\n  }\r\n}\r\n\r\nexport function usePalette(src: string) {\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n  React.useEffect(() => {\r\n    let subscribed = true;\r\n    !subscribed || dispatch({ type: \"getPalette\" });\r\n\r\n    getPalette(src)\r\n      .then((palette) => {\r\n        !subscribed || dispatch({ type: \"resolvePalette\", payload: palette });\r\n      })\r\n      .catch((ex) => {\r\n        !subscribed || dispatch({ type: \"rejectPalette\", payload: ex });\r\n      });\r\n\r\n    return () => {\r\n      subscribed = false;\r\n    };\r\n  }, [src]);\r\n\r\n  return state;\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport { PaletteState, usePalette } from \"./usePalette\";\r\n\r\nexport type PaletteProps = {\r\n  src: string;\r\n  children(palette: PaletteState): ReactNode;\r\n};\r\n\r\nexport const Palette: React.FC<PaletteProps> = ({\r\n  src,\r\n  children\r\n}: PaletteProps) => {\r\n  const palette = usePalette(src);\r\n\r\n  return <>{children(palette)}</>;\r\n};\r\n"],"names":["getPalette","src","palette","Vibrant","from","keys","reduce","acc","paletteName","camelCase","invoke","initialState","loading","data","error","undefined","state","action","type","payload","dispatch","React","useReducer","reducer","useEffect","subscribed","then","catch","ex","Palette","children","usePalette","_jsx"],"mappings":"wYAcsBA,eAAAA,EAAWC,GAC/B,MAAaC,QAAgBC,EAACC,KAAKH,GAAKD,aAMxC,cAAcK,KAAKH,GAASI,OALJ,CAACC,EAAKC,IACzBD,EAAAA,CAAAA,EAAAA,GACH,CAACE,EAAUD,IAAeE,EAAOR,EAAS,CAACM,EAAa,aAGS,GACpE,CCbD,MAAkBG,EAAiB,CACjCC,SAAS,EACTC,KAAM,CAAA,EACNC,WAAOC,GAGT,WAAiBC,EAAqBC,GACpC,OAAQA,EAAOC,MACb,IAAK,aACH,OAAAP,EACF,IAAK,iBACH,YAAYK,EAAZ,CAAmBH,KAAMI,EAAOE,QAASP,SAAS,IACpD,IAAK,gBACH,OAAYI,EAAAA,CAAAA,EAAAA,GAAOF,MAAOG,EAAOE,QAASP,SAAS,IAExD,CAEK,WAAqBX,GACzB,MAAOe,EAAOI,GAAYC,EAAMC,WAAWC,EAASZ,GAmBpD,OAjBAU,EAAMG,UAAU,KACd,OAAiB,EAWjB,OAVCC,GAAcL,EAAS,CAAEF,KAAM,eAEhClB,EAAWC,GACRyB,KAAMxB,KACJuB,GAAcL,EAAS,CAAEF,KAAM,iBAAkBC,QAASjB,MAE5DyB,MAAOC,KACLH,GAAcL,EAAS,CAAEF,KAAM,gBAAiBC,QAASS,GAC3D,GAEI,KACLH,GAAa,CACd,CAAA,EACA,CAACxB,IAGLe,CAAA,CCvCYa,QAAkC,EAC7C5B,MACA6B,eAEA,MAAa5B,EAAG6B,EAAW9B,GAE3B,OAAO+B,cAAGF,EAAS5B"}