{"version":3,"file":"react-palette.umd.js","sources":["../src/getPalette.ts","../src/usePalette.tsx","../src/Palette.tsx"],"sourcesContent":["import Vibrant from \"node-vibrant\";\r\nimport camelCase from \"lodash.camelcase\";\r\nimport invoke from 'lodash.invoke';\r\n\r\nexport type PaletteColors = {\r\n  vibrant?: string;\r\n  muted?: string;\r\n  darkVibrant?: string;\r\n  darkMuted?: string;\r\n  lightVibrant?: string;\r\n  lightMuted?: string;\r\n  [name: string]: string | undefined;\r\n};\r\n\r\nexport async function getPalette(src: string) {\r\n  const palette = await Vibrant.from(src).getPalette();\r\n  const setPaletteColor = (acc, paletteName) => ({\r\n    ...acc,\r\n    [camelCase(paletteName)]: invoke(palette, [paletteName, 'getHex'])\r\n  });\r\n\r\n  return Object.keys(palette).reduce<PaletteColors>(setPaletteColor, {});\r\n}\r\n","import React from \"react\";\r\nimport { getPalette, PaletteColors } from \"./getPalette\";\r\n\r\nexport type PaletteState = {\r\n  loading: boolean;\r\n  error?: Error;\r\n  data: PaletteColors;\r\n};\r\n\r\nconst initialState: PaletteState = {\r\n  loading: true,\r\n  data: {},\r\n  error: undefined,\r\n};\r\n\r\nfunction reducer(state: PaletteState, action): PaletteState {\r\n  switch (action.type) {\r\n    case \"getPalette\":\r\n      return initialState;\r\n    case \"resolvePalette\":\r\n      return { ...state, data: action.payload, loading: false };\r\n    case \"rejectPalette\":\r\n      return { ...state, error: action.payload, loading: false };\r\n  }\r\n}\r\n\r\nexport function usePalette(src: string) {\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n  React.useEffect(() => {\r\n    let subscribed = true;\r\n    !subscribed || dispatch({ type: \"getPalette\" });\r\n\r\n    getPalette(src)\r\n      .then((palette) => {\r\n        !subscribed || dispatch({ type: \"resolvePalette\", payload: palette });\r\n      })\r\n      .catch((ex) => {\r\n        !subscribed || dispatch({ type: \"rejectPalette\", payload: ex });\r\n      });\r\n\r\n    return () => {\r\n      subscribed = false;\r\n    };\r\n  }, [src]);\r\n\r\n  return state;\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport { PaletteState, usePalette } from \"./usePalette\";\r\n\r\nexport type PaletteProps = {\r\n  src: string;\r\n  children(palette: PaletteState): ReactNode;\r\n};\r\n\r\nexport const Palette: React.FC<PaletteProps> = ({\r\n  src,\r\n  children\r\n}: PaletteProps) => {\r\n  const palette = usePalette(src);\r\n\r\n  return <>{children(palette)}</>;\r\n};\r\n"],"names":["getPalette","src","Vibrant","from","palette","Object","keys","reduce","acc","paletteName","_extends2","_extends","camelCase","invoke","e","Promise","reject","initialState","loading","data","error","undefined","state","action","type","payload","_React$useReducer","React","useReducer","reducer","dispatch","useEffect","subscribed","then","ex","Palette","_ref","children","usePalette"],"mappings":"u3BAcsBA,SAAWC,OACTC,OAAAA,QAAAA,QAAAA,EAAO,QAACC,KAAKF,GAAKD,4BAAlCI,GAMN,OAAaC,OAACC,KAAKF,GAASG,OALJ,SAACC,EAAKC,GAAN,IAAAC,EAAA,OAAAC,EAAA,CAAA,EACnBH,IADmBE,EAAA,CAAA,GAErBE,EAAS,QAACH,IAAeI,EAAAA,QAAOT,EAAS,CAACK,EAAa,gBAGS,CAA5D,EAPmC,EAA5C,CAAA,MAAAK,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,ECLkBG,EAAiB,CACjCC,SAAS,EACTC,KAAM,CAF2B,EAGjCC,WAAOC,GAGT,WAAiBC,EAAqBC,GACpC,OAAQA,EAAOC,MACb,IAAK,aACH,OAAAP,EACF,IAAK,iBACH,YAAYK,EAAZ,CAAmBH,KAAMI,EAAOE,QAASP,SAAS,IACpD,IAAK,gBACH,OAAYI,EAAAA,CAAAA,EAAAA,GAAOF,MAAOG,EAAOE,QAASP,SAAS,IAExD,CAEK,WAAqBjB,GACzB,IAAAyB,EAA0BC,EAAK,QAACC,WAAWC,EAASZ,GAA7CK,EAAPI,EAAA,GAAcI,EAEdH,EAAAA,GAiBA,OAjBAA,EAAAA,QAAMI,UAAU,WACd,OAAiB,EAWjB,OAVCC,GAAcF,EAAS,CAAEN,KAAM,eAEhCxB,EAAWC,GACRgC,KAAK,SAAC7B,IACJ4B,GAAcF,EAAS,CAAEN,KAAM,iBAAkBC,QAASrB,GAC5D,GACM,MAAA,SAAC8B,IACLF,GAAcF,EAAS,CAAEN,KAAM,gBAAiBC,QAASS,GAC3D,cAGDF,GAAa,CACd,CACF,EAAE,CAAC/B,IAGLqB,CAAA,CCvCYa,IAAOA,EAA2B,SAAAC,GAC7CnC,IACAoC,EACiBD,EADjBC,SAEMjC,EAAUkC,EAHhBrC,EAAAA,KAKA,kCAAUoC,EAASjC,IACpB"}